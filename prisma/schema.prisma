// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  address       String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts Account[]
  sessions Session[]
  campaigns Campaign[]
  contacts Contact[]
  lists List[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Campaign {
  id            String    @id @default(cuid())
  name          String
  description   String?
  subject       String?
  content       String
  type          String    @default("email") // email, notification
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  user         User @relation(fields: [userId], references: [id])
  userId       String

  list List @relation(fields: [listId], references: [id])
  listId String

  @@map(name: "campaigns")
}

model List {
  id           String    @id @default(cuid())
  name         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  contacts     ListContact[]
  campaigns    Campaign[]

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map(name: "contact_lists")
}

model Contact {
  address String @id
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  contactLists  ListContact[]

  @@map(name: "contacts")
}

model ListContact {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  list  List @relation(fields: [listId], references: [id])
  listId String

  contact  Contact @relation(fields: [contactAddress], references: [address])
  contactAddress String

  @@unique([listId, contactAddress])
  @@index([listId])
  @@map(name: "contact_list_contacts")
}